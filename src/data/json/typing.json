{"0": {"name": "gradual typing", "description": "typing system"}, "1": {"name": "manifest typing", "description": ""}, "2": {"name": "dependently typed programming", "description": "programming"}, "3": {"name": "weak typing", "description": "the opposite of strong typing discipline"}, "4": {"name": "structural type system", "description": "major class of type system, in which type compatibility and equivalence are determined by the type's actual structure or definition, and not by other characteristics such as its name or place of declaration"}, "5": {"name": "nominative typing", "description": "major class of type system, in which compatibility and equivalence of data types is determined by explicit declarations and/or the name of the types"}, "6": {"name": "dynamic typing", "description": "a style of dynamic typing in object oriented programming"}, "7": {"name": "duck typing", "description": "a style of dynamic typing in object oriented programming"}, "8": {"name": "linear typing", "description": ""}, "9": {"name": "static typing", "description": "type system paradigm where all type checking is done at compile time"}, "10": {"name": "inference typing", "description": "automatic detection of the data type of an expression in a programming language"}, "11": {"name": "partial inference typing", "description": "a style of dynamic typing in object-oriented programming"}, "12": {"name": "parametric polymorphism", "description": "the basis of generic programming"}, "13": {"name": "strong typing", "description": "specificity of a programming language's syntax when manipulating types of data"}, "14": {"name": "polymorphism", "description": "in programming languages and type theory, accessing different types using a common interface"}}